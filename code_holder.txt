

  private applyFormValues2 (group, formValues, isFromArray) {
    console.log('-------------------------------------', 'applyFormValues isFromArray = ', isFromArray);
    console.log('applyFormValues group = ', group);
    console.log('applyFormValues formValues = ', formValues);
    
    if (isFromArray > 0) {
      group.controls[isFromArray]  = new FormGroup(isFromArray);
    }

    for (var mainGroupKey in group.controls) {

      if (group.controls.hasOwnProperty(mainGroupKey)) {
        console.log('=================', mainGroupKey + " -> " + group.controls[mainGroupKey]);

        if (group.controls[mainGroupKey] instanceof FormArray) {
          
          console.log('Updating values for FormArray ' + mainGroupKey + '', group.controls[mainGroupKey], formValues[mainGroupKey]);

          let count = 1;
          for (var i in formValues[mainGroupKey]) {
            console.log('subGroups in FormArray = ', formValues[mainGroupKey][i]);
            this.applyFormValues(group.controls[mainGroupKey], formValues[mainGroupKey][i], count);
            count++;
          }
        } else if (group.controls[mainGroupKey] instanceof FormGroup) {
          console.log('Updating values for FormGroup ' + mainGroupKey + ' = ', group.controls[mainGroupKey]);
          

          for (var subGroupmainGroupKey in formValues) {
            console.log('subGroups in FormGRoup = ', formValues[subGroupmainGroupKey]);
            this.applyFormValues(group.controls[mainGroupKey], formValues[subGroupmainGroupKey], 0);
          }

        } else {
          console.log('Updating values for FormControl ' + mainGroupKey + ' = ', group.controls[mainGroupKey]);
          if (formValues.hasOwnProperty(mainGroupKey) && formValues[mainGroupKey] != undefined) {
            if (isFromArray > 0) {
              //(<FormGroup>group.controls[isFromArray]).setControl(mainGroupKey, group.controls[mainGroupKey].setValue(formValues[mainGroupKey]));
              group.controls[mainGroupKey].setValue(formValues[mainGroupKey]);
            } else {
              group.controls[mainGroupKey].setValue(formValues[mainGroupKey]);
            }
          }
        }
      }
    }

  }

------------------------------------------





<form *ngIf="!(docOfCocs | async)" [formGroup]="docForm"  (ngSubmit)="onSubmit()" [hidden]="submitted">

  <ul data-role="listview">
    <li>
      <h2>Adding New Record in {{(docOfCocs|async)?.name}}</h2>
    </li>

    <li>
      <label for="cocsAddFormObsoleteId">Status:</label>
      <select id="cocsAddcocsObsoleteId" formControlName="active" data-role="slider" required>
        <option value="false">In Active</option>
        <option value="true" selected=selected>Active</option>
      </select>
    </li>

    <li *ngFor="let key of docForm.getKeysForForm()">
      <label for="cocsAddFormNumberId">
        {{docOfCocs.getTitle(key)}}: <input type="text" id="cocsAddFormNumberId" formControlName="{{key}}">
      </label>
    </li>

    <li>
      <button
        type="submit"
        class="ui-btn ui-shadow ui-btn-inline ui-corner-all ui-icon-action ui-btn-icon-left"
      >
        Add
      </button>
      <button 
        [routerLink]="['/cocs']" 
        class="ui-btn ui-shadow ui-btn-inline ui-corner-all ui-icon-arrow-l ui-btn-icon-left"
      >
        Cancel
      </button>
      <button 
        type="reset" 
        class="ui-btn ui-shadow ui-btn-inline ui-corner-all ui-icon-recycle ui-btn-icon-left"
      >
        Reset
      </button>
    </li>
  </ul>
  
</form>

====================================================

    docForm: FormGroup;
    public docOfCocs: FirebaseObjectObservable<CollectionOfCollections>;

    submitted: boolean = false;
    constructor(
        private _fb: FormBuilder,
        private _af: AngularFire,
        private _route: ActivatedRoute
    ) {
        this.docForm = this._fb.group(this.docOfCocs);
    }
    
    ngOnInit() {
      let cDocKey = this._route.snapshot.paramMap.get('cDocKey');
      let cNum = this._route.snapshot.paramMap.get('cNum');
      this.docOfCocs = this._af.database.object(`/c3/${cDocKey}`);
    }

=================================================
      
       // Simulate POST /forms
  add(form: Form): FormDataService {
    if (!form.number) {
      this.count++;
      form.number = <string><any>(this.count);
    }
    this.forms.push(form);
    return this;
  }

  remove(form) {
    this.forms.remove(form);
  }
  
  // Simulate DELETE /forms/:number
  /*
  deleteByNumber(number: string): FormDataService {
    return this.forms.filter(form => form.number !== number);
  }
  */
  // Simulate PUT /forms/:number
  updateByNumber(number: string, values: Object = {}): Form {
    let form = this.getByNumber(number);
    if (!form) {
      return null;
    }
    Object.assign(form, values);
    return form;
  }

  // Simulate GET /forms
  getAll(): FirebaseListObservable<any[]> {
    return this.af.database.list('/c1');
  }

  filterBy(number: string) {
    this.numberSubject.next(number);
  }
  
  // Simulate GET /forms/:number
  getByNumber(number: string) {
     
     /* return this.forms.child('users').orderByChild('number').equalTo(number); */
    /* const queryObservable = this.af.database.list('/c1', {
      query: {
        orderByChild: 'number',
        equalTo: number
      }
    });
    return queryObservable;
    */
  }

  // Toggle form complete
  toggleObsolete(form: Form){
    let updated = this.updateByNumber(form.number, {
      obsolete: !form.obsolete
    });
    return updated;
  }


-------------------------


 toggleObsolete(document) {
    this.formDataService.toggleObsolete(document);
  }

  add() {
    this.formDataService.add(this.newDocument);
    /* empty the current document */
    this.newDocument = new Form();
  }

  remove(document) {
    this.formDataService.remove(document);
  }

  getAll() {
    return this.formDataService.getAll();
  }
