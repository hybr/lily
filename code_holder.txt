
    
    this.recordValues =  
{
  "a1": true,
  "a2": "c1",
  "a3": "Collections",
  "a4": "The list of collections",
  "a5": {
    "0": {
      "f1": "a1",
      "f2": "Is Collection Active",
      "f3": "field",
      "f5": "boolean",
      "f4": "1"
    },
    "1": {
      "f1": "a2",
      "f2": "Collection Number",
      "f3": "field",
      "f5": "string",
      "f4": "3"
    },
    "2": {
      "f1": "a3",
      "f2": "Collection Name",
      "f3": "field",
      "f5": "string",
      "f4": "2"
    },
    "3": {
      "f1": "a4",
      "f2": "Detail",
      "f3": "field",
      "f5": "string",
      "f4": "4"
    },
    "4": {
      "0": {
        "f1": "f1",
        "f2": "Name",
        "f3": "field",
        "f4": 1
      },
      "1": {
        "f1": "f2",
        "f2": "Title",
        "f3": "field",
        "f4": 2
      },
      "2": {
        "f1": "f3",
        "f2": "Field Type",
        "f3": "field",
        "f4": 3
      },
      "3": {
        "f1": "f4",
        "f2": "Sequence",
        "f3": "field",
        "f4": 5
      },
      "4": {
        "f1": "f5",
        "f2": "Value Type",
        "f3": "field",
        "f4": 4
      },
      "5": {
        "f1": "f6",
        "f2": "Default Value",
        "f3": "field",
        "f4": 6
      },
      "6": {
        "f1": "f7",
        "f2": "Is Required",
        "f3": "field",
        "f4": 7,
        "f5" : 'boolean'
      },
      "f1": "a5",
      "f2": "Record Structure",
      "f3": "field_group",
      "f5": "object",
      "f4": "5"
    }
  }
}


------------------------------------------------


          <app-collections-record-field
        
              *ngIf="recordStructure['field_type'] == 'field'"

            [fieldValue]="fieldGroupValues[valueKey]"

            [fieldProperties]="fieldGroupProperties[fieldGroupPropertyName]" 

            (fieldValueUpdated)="updateFieldValue(valueKey, fieldGroupPropertyName, $event)"

          ></app-collections-record-field>

          <app-collections-record-field-group

            *ngIf="recordStructure['field_type'] == 'field_group'"

            [fieldGroupValues]="fieldGroupValues[valueKey]"

            [fieldGroupProperties]="fieldGroupProperties[fieldGroupPropertyName]" 

            (fieldGroupValueUpdated)="updateFieldValue(valueKey, fieldGroupPropertyName, $event)"

          ></app-collections-record-field-group>

----------------------------

<table><!-- L1 -->
  <tr><td><!-- L1, R1 -->
    
  </td></tr><!-- L1, R1 -->
</table><!-- L1 -->

---------------------------

<table><!-- all fields -->
        <tr><td><!-- all fields -->
          <md-slide-toggle ([ngModal])="active">Status</md-slide-toggle>
        </td></tr><!-- all fields -->

        <tr *ngFor="let field of fields[0]"><td><!-- all fields -->

          <span *ngIf="(field['name'] != 'active')"><!-- fields to ignore -->
          <span *ngIf="(field['type'] != 'fields')"><!-- main fields -->
            <md-input-container *ngIf="(field['type'] == 'string')">
              <input 
              mdInput  
              placeholder="{{field['title']}}" 
              type="text" 
              [(ngModel)]="field['name']"
              id="addInCollField{{field['name']}}Id"
              />
            </md-input-container>

            <md-input-container *ngIf="(field['type'] == 'number')">
              <input 
              mdInput  
              placeholder="{{field['title']}}" 
              type="number" 
              [(ngModel)]="field['name']"
              id="addInCollField{{field['name']}}Id"
              />
            </md-input-container>

            <md-input-container *ngIf="(field['type'] == 'date')">
              <input 
              mdInput  
              placeholder="{{field['title']}}" 
              type="date" 
              [(ngModel)]="field['name']"
              id="addInCollField{{field['name']}}Id"
              />
            </md-input-container>
          </span><!-- main fields -->

          <table *ngIf="(field['type'] == 'fields')"><!-- show sub fields -->

            <tr><td><!-- show sub fields -->
              {{field['title']}}
            </td></tr><!-- show sub fields -->

            <tr><td><!-- show sub fields -->
                <table>
                  <tr *ngFor="let sF of field['subFields']"><td>
                    <div class="lns_sub_fields_border">{{sF}}<!-- [formGroupName]="i" -->

                      <div><!--  remove button -->
                        <button md-raised-button (click)="removeSubFieldL1(i, field['name'])">
                          Remove {{i + 1}}
                        </button>
                      </div><!-- remove button -->

                        <md-list>
                          <md-list-item *ngFor="let subField of field['value']" ><!-- each sub field -->
                            <md-input-container md-line *ngIf="(subField['type'] == 'string')">
                              <input 
                                mdInput 
                                placeholder="{{subField['title']}}" 
                                type="text" 
                                [(ngModel)]="subField['name']"
                                id="addInCollField{{subField['name']}}Id"
                              />
                            </md-input-container>

                            <md-input-container md-line *ngIf="(subField['type'] == 'number')">
                              <input 
                                mdInput  
                                placeholder="{{subField['title']}}" 
                                type="number" 
                                [(ngModel)]="subField['name']"
                                id="addInCollField{{subField['name']}}Id"
                              />
                            </md-input-container>

                            <md-input-container md-line *ngIf="(subField['type'] == 'date')">
                              <input 
                                mdInput   
                                placeholder="{{subField['title']}}" 
                                type="date" 
                                [(ngModel)]="subField['name']"
                                id="addInColmdInput lField{{subField['name']}}Id"
                              />
                            </md-input-container>
                          </md-list-item><!-- each sub field -->
                        </md-list>


                    </div><!-- [formGroupName]="i" -->

                  </td></tr><!-- ngFor="let singleSubRecord -->

                </table><!-- formArrayName="{{field['name']}}"-->
            </td></tr><!-- show sub fields -->

            <tr><td><!-- show sub fields -->
              <button 
                md-raised-button
                (click)="addSubFieldL1(field['name'], 
                docForm['controls'][field['name']]['controls'])"
                title="Add New in {{field['title']}}"
              >Add New in {{field['title']}}</button>
            </td></tr><!-- show sub fields -->

          </table><!-- show sub fields -->
          </span><!-- fields to ignore -->

        </td></tr><!-- *ngFor="let field of fields[0]" --><!-- all fields -->


        <tr><td><!-- all fields -->
          <button
            md-raised-button
            type="submit"
            [disabled]="!docForm.valid"
          >Add Record</button>
          <button
            md-raised-button
            [routerLink]="['/cocs/list']" 
          >Cancel</button>
          <button
            md-raised-button
            type="reset" 
          >Reset</button>
        </td></tr><!-- all fields -->

      </table><!-- all fields -->



--------------------------------------------------------------------------------------------------------------



  private applyFormValues2 (group, formValues, isFromArray) {
    console.log('-------------------------------------', 'applyFormValues isFromArray = ', isFromArray);
    console.log('applyFormValues group = ', group);
    console.log('applyFormValues formValues = ', formValues);
    
    if (isFromArray > 0) {
      group.controls[isFromArray]  = new FormGroup(isFromArray);
    }

    for (var mainGroupKey in group.controls) {

      if (group.controls.hasOwnProperty(mainGroupKey)) {
        console.log('=================', mainGroupKey + " -> " + group.controls[mainGroupKey]);

        if (group.controls[mainGroupKey] instanceof FormArray) {
          
          console.log('Updating values for FormArray ' + mainGroupKey + '', group.controls[mainGroupKey], formValues[mainGroupKey]);

          let count = 1;
          for (var i in formValues[mainGroupKey]) {
            console.log('subGroups in FormArray = ', formValues[mainGroupKey][i]);
            this.applyFormValues(group.controls[mainGroupKey], formValues[mainGroupKey][i], count);
            count++;
          }
        } else if (group.controls[mainGroupKey] instanceof FormGroup) {
          console.log('Updating values for FormGroup ' + mainGroupKey + ' = ', group.controls[mainGroupKey]);
          

          for (var subGroupmainGroupKey in formValues) {
            console.log('subGroups in FormGRoup = ', formValues[subGroupmainGroupKey]);
            this.applyFormValues(group.controls[mainGroupKey], formValues[subGroupmainGroupKey], 0);
          }

        } else {
          console.log('Updating values for FormControl ' + mainGroupKey + ' = ', group.controls[mainGroupKey]);
          if (formValues.hasOwnProperty(mainGroupKey) && formValues[mainGroupKey] != undefined) {
            if (isFromArray > 0) {
              //(<FormGroup>group.controls[isFromArray]).setControl(mainGroupKey, group.controls[mainGroupKey].setValue(formValues[mainGroupKey]));
              group.controls[mainGroupKey].setValue(formValues[mainGroupKey]);
            } else {
              group.controls[mainGroupKey].setValue(formValues[mainGroupKey]);
            }
          }
        }
      }
    }

  }

------------------------------------------





<form *ngIf="!(docOfCocs | async)" [formGroup]="docForm"  (ngSubmit)="onSubmit()" [hidden]="submitted">

  <ul data-role="listview">
    <li>
      <h2>Adding New Record in {{(docOfCocs|async)?.name}}</h2>
    </li>

    <li>
      <label for="cocsAddFormObsoleteId">Status:</label>
      <select id="cocsAddcocsObsoleteId" formControlName="active" data-role="slider" required>
        <option value="false">In Active</option>
        <option value="true" selected=selected>Active</option>
      </select>
    </li>

    <li *ngFor="let key of docForm.getKeysForForm()">
      <label for="cocsAddFormNumberId">
        {{docOfCocs.getTitle(key)}}: <input type="text" id="cocsAddFormNumberId" formControlName="{{key}}">
      </label>
    </li>

    <li>
      <button
        type="submit"
        class="ui-btn ui-shadow ui-btn-inline ui-corner-all ui-icon-action ui-btn-icon-left"
      >
        Add
      </button>
      <button 
        [routerLink]="['/cocs']" 
        class="ui-btn ui-shadow ui-btn-inline ui-corner-all ui-icon-arrow-l ui-btn-icon-left"
      >
        Cancel
      </button>
      <button 
        type="reset" 
        class="ui-btn ui-shadow ui-btn-inline ui-corner-all ui-icon-recycle ui-btn-icon-left"
      >
        Reset
      </button>
    </li>
  </ul>
  
</form>

====================================================

    docForm: FormGroup;
    public docOfCocs: FirebaseObjectObservable<CollectionOfCollections>;

    submitted: boolean = false;
    constructor(
        private _fb: FormBuilder,
        private _af: AngularFire,
        private _route: ActivatedRoute
    ) {
        this.docForm = this._fb.group(this.docOfCocs);
    }
    
    ngOnInit() {
      let cDocKey = this._route.snapshot.paramMap.get('cDocKey');
      let cNum = this._route.snapshot.paramMap.get('cNum');
      this.docOfCocs = this._af.database.object(`/c3/${cDocKey}`);
    }

=================================================
      
       // Simulate POST /forms
  add(form: Form): FormDataService {
    if (!form.number) {
      this.count++;
      form.number = <string><any>(this.count);
    }
    this.forms.push(form);
    return this;
  }

  remove(form) {
    this.forms.remove(form);
  }
  
  // Simulate DELETE /forms/:number
  /*
  deleteByNumber(number: string): FormDataService {
    return this.forms.filter(form => form.number !== number);
  }
  */
  // Simulate PUT /forms/:number
  updateByNumber(number: string, values: Object = {}): Form {
    let form = this.getByNumber(number);
    if (!form) {
      return null;
    }
    Object.assign(form, values);
    return form;
  }

  // Simulate GET /forms
  getAll(): FirebaseListObservable<any[]> {
    return this.af.database.list('/c1');
  }

  filterBy(number: string) {
    this.numberSubject.next(number);
  }
  
  // Simulate GET /forms/:number
  getByNumber(number: string) {
     
     /* return this.forms.child('users').orderByChild('number').equalTo(number); */
    /* const queryObservable = this.af.database.list('/c1', {
      query: {
        orderByChild: 'number',
        equalTo: number
      }
    });
    return queryObservable;
    */
  }

  // Toggle form complete
  toggleObsolete(form: Form){
    let updated = this.updateByNumber(form.number, {
      obsolete: !form.obsolete
    });
    return updated;
  }


-------------------------


 toggleObsolete(document) {
    this.formDataService.toggleObsolete(document);
  }

  add() {
    this.formDataService.add(this.newDocument);
    /* empty the current document */
    this.newDocument = new Form();
  }

  remove(document) {
    this.formDataService.remove(document);
  }

  getAll() {
    return this.formDataService.getAll();
  }
